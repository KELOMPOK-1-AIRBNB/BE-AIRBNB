// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	reservation "github.com/KELOMPOK-1-AIRBNB/BE-AIRBNB/features/reservation"
	mock "github.com/stretchr/testify/mock"
)

// ReservationData is an autogenerated mock type for the DataInterface type
type ReservationData struct {
	mock.Mock
}

// CheckAvailability provides a mock function with given fields: input
func (_m *ReservationData) CheckAvailability(input reservation.Core) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CheckAvailability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(reservation.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReservation provides a mock function with given fields: input
func (_m *ReservationData) CreateReservation(input reservation.Core) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateReservation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(reservation.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHistory provides a mock function with given fields: UserId
func (_m *ReservationData) GetHistory(UserId uint) ([]reservation.Core, error) {
	ret := _m.Called(UserId)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 []reservation.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]reservation.Core, error)); ok {
		return rf(UserId)
	}
	if rf, ok := ret.Get(0).(func(uint) []reservation.Core); ok {
		r0 = rf(UserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reservation.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(UserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReservationData creates a new instance of ReservationData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservationData(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservationData {
	mock := &ReservationData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
